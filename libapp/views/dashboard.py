"""
Vue principale du tableau de bord (Dashboard).

Ce module dÃ©finit la `DashboardView`, qui sert de page d'accueil Ã 
l'application. Elle affiche des statistiques clÃ©s (KPIs) sur l'Ã©tat de la
bibliothÃ¨que et fournit des raccourcis vers les actions les plus courantes.
"""

from __future__ import annotations

from datetime import date
from functools import partial

from PySide6.QtCore import Qt, Signal, Slot
from PySide6.QtWidgets import QGridLayout, QHBoxLayout, QLabel, QPushButton, QVBoxLayout, QWidget
from sqlalchemy import func, select

from ..persistence.database import get_session
from ..persistence.models_sa import Book, Loan, LoanStatus, Member
from ..services.translation_service import translate
from ..utils.icon_helper import toolbar_icon


def _to_int(value: any) -> int:
    """Convertit une valeur en entier de maniÃ¨re sÃ©curisÃ©e, avec 0 par dÃ©faut."""
    try:
        return int(value or 0)
    except (ValueError, TypeError):
        return 0


class ClickableLabel(QLabel):
    """
    Un QLabel personnalisÃ© qui Ã©met un signal `clicked` lorsqu'on clique dessus.

    Il est stylisÃ© pour ressembler Ã  un lien hypertexte afin d'inciter Ã  l'action.
    """

    clicked = Signal()

    def __init__(self, text: str = "", parent: QWidget | None = None):
        """Initialise le label cliquable."""
        super().__init__(text, parent)
        self.setCursor(Qt.PointingHandCursor)
        self.setStyleSheet("color: #2e86c1; text-decoration: underline;")

    def mousePressEvent(self, event):
        """Ã‰met le signal `clicked` lors d'un clic de souris."""
        self.clicked.emit()
        super().mousePressEvent(event)


class DashboardView(QWidget):
    """
    Widget principal du tableau de bord.

    Cette vue affiche un rÃ©sumÃ© de l'Ã©tat de la bibliothÃ¨que (nombre de livres,
    de membres, de prÃªts en cours, etc.) et des boutons d'action rapide.
    Elle est conÃ§ue pour Ãªtre "stupide" : elle affiche les donnÃ©es et Ã©met des
    signaux vers la MainWindow, qui contient la logique de l'application.

    Signals:
        newBookRequested: DemandÃ© lors du clic sur "Nouveau Livre".
        newMemberRequested: DemandÃ© lors du clic sur "Nouveau Membre".
        newLoanRequested: DemandÃ© lors du clic sur "Nouveau PrÃªt".
        filterLoansRequested (str, bool): Demande l'affichage de la liste des prÃªts
                                          avec un filtre. Le boolÃ©en indique si
                                          seuls les retards doivent Ãªtre montrÃ©s.
        detachRequested: DemandÃ© lorsque l'utilisateur veut dÃ©tacher la vue.
    """

    # --- DÃ©claration des signaux Ã©mis par la vue ---
    newBookRequested = Signal()
    newMemberRequested = Signal()
    newLoanRequested = Signal()
    filterLoansRequested = Signal(str, bool)  # (status_filter, overdue_only)
    detachRequested = Signal()
    showMembersRequested = Signal()

    def __init__(self, parent: QWidget | None = None):
        """Initialise la vue du tableau de bord."""
        super().__init__(parent)
        self._setup_ui()
        self._connect_signals()
        self.refresh()

    def _setup_ui(self):
        """Construit l'interface utilisateur du tableau de bord."""
        root_layout = QVBoxLayout(self)

        # --- Barre de titre avec bouton "DÃ©tacher" ---
        title_bar_layout = QHBoxLayout()
        title_label = QLabel(translate("dashboard.view_title"))
        title_label.setStyleSheet("font-size: 16px; font-weight: bold;")
        title_bar_layout.addWidget(title_label)
        title_bar_layout.addStretch()
        self.detach_button = QPushButton(
            icon=toolbar_icon("arrow-square-out")  # IcÃ´ne "dÃ©tacher/ouvrir dans nouvelle fenÃªtre"
        )
        self.detach_button.setToolTip(translate("dashboard.detach_tooltip"))
        self.detach_button.setVisible(False)
        self.detach_button.setFixedSize(24, 24)
        title_bar_layout.addWidget(self.detach_button)
        root_layout.addLayout(title_bar_layout)

        # --- Grille pour les indicateurs clÃ©s (KPIs) ---
        kpi_widget = QWidget(self)
        self.kpi_grid = QGridLayout(kpi_widget)
        self.kpi_grid.setContentsMargins(20, 30, 20, 30)  # Plus de marges
        self.kpi_grid.setHorizontalSpacing(50)  # Plus d'espace horizontal
        self.kpi_grid.setVerticalSpacing(20)  # Plus d'espace vertical
        root_layout.addWidget(kpi_widget)

        # --- Barre d'actions rapides ---
        actions_layout = QHBoxLayout()
        self.new_book_button = QPushButton(translate("dashboard.new_book_button"))
        self.new_member_button = QPushButton(translate("dashboard.new_member_button"))
        self.new_loan_button = QPushButton(translate("dashboard.new_loan_button"))
        actions_layout.addWidget(self.new_book_button)
        actions_layout.addWidget(self.new_member_button)
        actions_layout.addWidget(self.new_loan_button)
        actions_layout.addStretch()
        self.new_book_button.setVisible(False)
        self.new_member_button.setVisible(False)
        self.new_loan_button.setVisible(False)
        root_layout.addLayout(actions_layout)

    def _connect_signals(self):
        """Connecte les signaux des widgets internes aux slots ou signaux de la vue."""
        self.detach_button.clicked.connect(self.detachRequested)
        self.new_book_button.clicked.connect(self.newBookRequested)
        self.new_member_button.clicked.connect(self.newMemberRequested)
        self.new_loan_button.clicked.connect(self.newLoanRequested)

    @Slot()
    def refresh(self) -> None:
        """
        Orchestre le rafraÃ®chissement complet de la vue.

        Cette mÃ©thode est le point d'entrÃ©e public pour mettre Ã  jour le tableau
        de bord. Elle rÃ©cupÃ¨re les derniÃ¨res statistiques et met Ã  jour l'affichage.
        """
        try:
            stats = self._compute_kpis()
            self._update_display(stats)
        except Exception as e:
            print(f"Erreur critique lors du rafraÃ®chissement du dashboard: {e}")
            # En cas d'erreur (ex: DB non accessible), on affiche des zÃ©ros
            self._update_display((0,) * 6)

    def _update_display(self, stats: tuple[int, ...]):
        """Met Ã  jour les widgets d'affichage avec les nouvelles statistiques."""
        (books_count, copies_total, copies_available, members_count, loans_open, overdues_count) = (
            stats
        )

        # Nettoie la grille avant de la reconstruire pour Ã©viter les doublons
        while self.kpi_grid.count():
            item = self.kpi_grid.takeAt(0)
            if widget := item.widget():
                widget.deleteLater()

        # --- CrÃ©ation et affichage des nouveaux KPIs ---
        availability_rate = round(100 * copies_available / copies_total) if copies_total > 0 else 0

        self._create_kpi_widget(translate("dashboard.kpi.books_label"), str(books_count), 0, 0)
        self._create_kpi_widget(
            translate("dashboard.kpi.copies_total_label"), str(copies_total), 0, 1
        )
        self._create_kpi_widget(
            translate("dashboard.kpi.copies_available_label"), str(copies_available), 0, 2
        )
        self._create_kpi_widget(
            translate("dashboard.kpi.availability_label"), f"{availability_rate}%", 0, 3
        )

        members_label = ClickableLabel(str(members_count))
        members_label.clicked.connect(self._on_members_clicked)  # ðŸ”¥ Connecter Ã  un nouveau signal
        self._create_kpi_widget(translate("dashboard.kpi.members_label"), members_label, 2, 0)

        # KPI cliquable pour les prÃªts ouverts
        open_loans_label = ClickableLabel(str(loans_open))
        open_loans_label.clicked.connect(
            partial(self.filterLoansRequested.emit, "PrÃªts ouverts", False)
        )
        self._create_kpi_widget(translate("dashboard.kpi.open_loans_label"), open_loans_label, 2, 1)

        # KPI cliquable pour les retards
        overdues_label = ClickableLabel(str(overdues_count))
        overdues_label.clicked.connect(
            partial(self.filterLoansRequested.emit, "PrÃªts en retard", True)
        )
        if overdues_count > 0:
            overdues_label.setStyleSheet("font-size:20px; font-weight:600; color:red;")
        self._create_kpi_widget(translate("dashboard.kpi.overdues_label"), overdues_label, 2, 2)

    def _create_kpi_widget(self, label_text: str, value_widget: QWidget | str, row: int, col: int):
        """CrÃ©e une paire de widgets (libellÃ© + valeur) et les place dans la grille."""
        label = QLabel(label_text)
        label.setStyleSheet("color:#666")

        if isinstance(value_widget, str):
            value = QLabel(value_widget)
            value.setStyleSheet("font-size:28px; font-weight:600;")
        else:
            value = value_widget  # C'est dÃ©jÃ  un widget (ex: ClickableLabel)
            if (
                not value.styleSheet()
            ):  # Applique le style par dÃ©faut si pas dÃ©jÃ  stylisÃ© (ex: en rouge)
                value.setStyleSheet("font-size:28px; font-weight:600;")

        self.kpi_grid.addWidget(label, row, col, Qt.AlignLeft)
        self.kpi_grid.addWidget(value, row + 1, col, Qt.AlignLeft)

    def _compute_kpis(self) -> tuple[int, int, int, int, int, int]:
        """
        RÃ©cupÃ¨re toutes les statistiques brutes depuis la base de donnÃ©es
        en une seule transaction.

        Returns:
            Un tuple contenant dans l'ordre : nombre de livres, total des exemplaires,
            exemplaires disponibles, nombre de membres, prÃªts ouverts, prÃªts en retard.
        """
        today = date.today()
        with get_session() as s:
            books_count = s.scalar(select(func.count(Book.id)))
            members_count = s.scalar(select(func.count(Member.id)))
            copies_total = s.scalar(select(func.coalesce(func.sum(Book.copies_total), 0)))
            copies_available = s.scalar(select(func.coalesce(func.sum(Book.copies_available), 0)))
            loans_open = s.scalar(select(func.count(Loan.id)).where(Loan.status == LoanStatus.open))
            overdues_count = s.scalar(
                select(func.count(Loan.id)).where(
                    Loan.status == LoanStatus.open, Loan.due_date < today
                )
            )

            return (
                _to_int(books_count),
                _to_int(copies_total),
                _to_int(copies_available),
                _to_int(members_count),
                _to_int(loans_open),
                _to_int(overdues_count),
            )

    def _on_members_clicked(self):
        """Ã‰met le signal pour afficher la liste des membres."""
        self.showMembersRequested.emit()
