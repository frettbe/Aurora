"""Service d'exportation des donn√©es vers des formats de fichiers standards.

Ce module fournit des fonctions pour exporter des listes de donn√©es
(livres, membres, etc.) vers des fichiers CSV ou XLSX avec m√©tadonn√©es.
"""

from __future__ import annotations

import csv
from collections.abc import Sequence
from datetime import datetime
from pathlib import Path
from typing import Any, Literal

from openpyxl import Workbook
from openpyxl.styles import Font

from ..services.translation_service import translate
from .metrics_service import benchmark

# üìã Type alias pour clart√©
ExportFormat = Literal["csv", "xlsx"]


class ExportMetadata:
    """M√©tadonn√©es √† inclure dans un export.

    Attributes:
        include_date: Inclure la date d'export.
        include_count: Inclure le nombre d'enregistrements.
        include_custom_message: Inclure un message personnalis√©.
        custom_message: Le message personnalis√© √† inclure.
        app_name: Nom de l'application (si configur√©).
        library_name: Nom de la biblioth√®que (si configur√©).
    """

    def __init__(
        self,
        include_date: bool = True,
        include_count: bool = True,
        include_custom_message: bool = False,
        custom_message: str = "",
        app_name: str = "Biblio",
        library_name: str = "",
    ):
        """Initialise les m√©tadonn√©es d'export.

        Args:
            include_date: Si True, inclut la date d'export.
            include_count: Si True, inclut le nombre d'enregistrements.
            include_custom_message: Si True, inclut un message personnalis√©.
            custom_message: Le message personnalis√© (si activ√©).
            app_name: Nom de l'application.
            library_name: Nom de la biblioth√®que (optionnel).
        """
        self.include_date = include_date
        self.include_count = include_count
        self.include_custom_message = include_custom_message
        self.custom_message = custom_message
        self.app_name = app_name
        self.library_name = library_name

    def generate_lines(self, record_count: int) -> list[str]:
        """G√©n√®re les lignes de m√©tadonn√©es √† inclure dans l'export.

        Args:
            record_count: Nombre d'enregistrements export√©s.

        Returns:
            Liste de strings repr√©sentant les m√©tadonn√©es.
        """
        lines = []

        # Ligne app/library name
        if self.library_name:
            lines.append(f"{self.app_name} - {self.library_name}")
        else:
            lines.append(self.app_name)

        # Date d'export
        if self.include_date:
            export_date = datetime.now().strftime("%d/%m/%Y %H:%M")
            lines.append(f"{translate('export.metadata.date')}: {export_date}")

        # Nombre d'enregistrements
        if self.include_count:
            lines.append(f"{translate('export.metadata.count')}: {record_count}")

        # Message personnalis√©
        if self.include_custom_message and self.custom_message:
            lines.append(self.custom_message)

        return lines


@benchmark("export_csv")
def export_data_to_csv(
    filepath: Path,
    headers: list[str],
    data: Sequence[Sequence[Any]],
    metadata: ExportMetadata | None = None,
) -> None:
    """Exporte des donn√©es vers un fichier CSV.

    Args:
        filepath: Chemin du fichier de destination.
        headers: Liste des en-t√™tes de colonnes.
        data: Donn√©es √† exporter (liste de listes/tuples).
        metadata: M√©tadonn√©es optionnelles √† inclure en d√©but de fichier.

    Raises:
        IOError: Si l'√©criture dans le fichier √©choue.
    """
    with filepath.open("w", newline="", encoding="utf-8-sig") as csvfile:
        writer = csv.writer(csvfile, delimiter=";")

        # √âcrire les m√©tadonn√©es si pr√©sentes
        if metadata:
            meta_lines = metadata.generate_lines(len(data))
            for line in meta_lines:
                writer.writerow([line])
            # Ligne vide de s√©paration
            writer.writerow([])

        # √âcrire les en-t√™tes
        writer.writerow(headers)

        # √âcrire les donn√©es
        for row in data:
            writer.writerow(row)


@benchmark("export_xlsx")
def export_data_to_xlsx(
    filepath: Path,
    headers: list[str],
    data: Sequence[Sequence[Any]],
    metadata: ExportMetadata | None = None,
    sheet_name: str = "Export",
) -> None:
    """Exporte des donn√©es vers un fichier Excel XLSX.

    Args:
        filepath: Chemin du fichier de destination.
        headers: Liste des en-t√™tes de colonnes.
        data: Donn√©es √† exporter (liste de listes/tuples).
        metadata: M√©tadonn√©es optionnelles √† inclure en d√©but de fichier.
        sheet_name: Nom de la feuille Excel (par d√©faut "Export").

    Raises:
        IOError: Si l'√©criture dans le fichier √©choue.
    """
    workbook = Workbook()
    sheet = workbook.active
    if sheet is None:
        msg = "Unable to create Excel worksheet"
        raise RuntimeError(msg)
    sheet.title = sheet_name

    current_row = 1

    # √âcrire les m√©tadonn√©es si pr√©sentes
    if metadata:
        meta_lines = metadata.generate_lines(len(data))
        for line in meta_lines:
            cell = sheet.cell(row=current_row, column=1, value=line)
            # Style en gras et italique pour les m√©tadonn√©es
            cell.font = Font(bold=True, italic=True)
            current_row += 1
        # Ligne vide de s√©paration
        current_row += 1

    # √âcrire les en-t√™tes
    for col_idx, header in enumerate(headers, start=1):
        cell = sheet.cell(row=current_row, column=col_idx, value=header)
        # En-t√™tes en gras
        cell.font = Font(bold=True)

    current_row += 1

    # √âcrire les donn√©es
    for row_data in data:
        for col_idx, value in enumerate(row_data, start=1):
            sheet.cell(row=current_row, column=col_idx, value=value)
        current_row += 1

    # Sauvegarder le fichier
    workbook.save(filepath)


def export_data(
    filepath: Path,
    headers: list[str],
    data: Sequence[Sequence[Any]],
    file_format: ExportFormat,
    metadata: ExportMetadata | None = None,
    sheet_name: str = "Export",
) -> None:
    """Exporte des donn√©es vers CSV ou XLSX selon le format sp√©cifi√©.

    Fonction g√©n√©rique qui d√©l√®gue √† la fonction d'export appropri√©e.

    Args:
        filepath: Chemin du fichier de destination.
        headers: Liste des en-t√™tes de colonnes.
        data: Donn√©es √† exporter (liste de listes/tuples).
        file_format: Format d'export ("csv" ou "xlsx").
        metadata: M√©tadonn√©es optionnelles √† inclure.
        sheet_name: Nom de la feuille (pour XLSX uniquement).

    Raises:
        ValueError: Si le format est invalide.
        IOError: Si l'√©criture √©choue.
    """
    if file_format == "csv":
        export_data_to_csv(filepath, headers, data, metadata)
    elif file_format == "xlsx":
        export_data_to_xlsx(filepath, headers, data, metadata, sheet_name)
    else:
        msg = f"Format non support√© : {file_format}"
        raise ValueError(msg)
